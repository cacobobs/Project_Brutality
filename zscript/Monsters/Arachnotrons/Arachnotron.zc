Class PB_Arachnotron1 : PB_Monster
{
	int artyCounter;
	int plasmaBallCounter;
	bool FirstTime;
	bool shieldActive;
	Default
	{
		//SpawnID 1600;
		
		Health 500;
		Mass 600;
		PainChance 128;		
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		GibHealth 20;
		Radius 60;
		Height 64;
		PainChance "Siphon", 255;
		PainChance "Stun", 255;
		DamageFactor "Crush", 10.0;
		DamageFactor "Avoid", 0.0;
		DamageFactor "killme", 0.0;
		DamageFactor "GibRemoving", 0.0;
		DamageFactor "TeleportRemover", 0.0;
		DamageFactor "CauseObjectsToSplash", 0.0;
		DamageFactor "Blood", 0.0;
		DamageFactor "BlueBlood", 0.0;
		DamageFactor "GreenBlood", 0.0;
		MaxStepHeight 24;
		MaxDropOffHeight 24;
		Speed 7;
		Species "Arachnotron";
		+DONTHARMSPECIES;
		+DONTHARMCLASS;
		Scale 1;
		SeeSound "baby/sight";
		PainSound "SP_CRAWL";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "$OB_BABY";
		DropItem "Demonpickup2", 255;
		DropItem "Demonpickup", 55;
	}

	override void BeginPlay()
	{ 	Super.BeginPlay();
		FirstTime = true;
		artyCounter = 0;
		plasmaBallCounter = 0;
		
		suppressiveOffZ = 25;
        suppressiveOffXY = 0;
        suppressiveMissile = "ArachnoRailGun";
		suppressLimit = 8;
		suppressLimit2 = 15;
		shieldActive = false;
	}
		
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) 
    {
        if (shieldActive)
        {
 //           Console.PrintF("\cgArachnotron protected by shield!");
            return 0;
        }
        return super.DamageMobj(inflictor, source, Damage, mod, flags, angle);        
    }

	States
	{
	Death.Execution:
		TNT1 A 0 
		{
			A_Stopsound();
			A_FaceTarget();
			A_NoBlocking();
		}
		BSPI AG 4;
		TNT1 A 0 A_Pain;
		BSPI I 21;
		TNT1 A 0 A_Recoil(4);
		Goto Death;

	Death.Blackhole:
		TNT1 A 1 A_BossDeath;
		TNT1 A 0 A_NoBlocking;
		TNT1 A 0 A_SpawnItem("BlackHoledArachnotron");
		Stop;

	Death.KillMe:
	Death.Taunt:
		TNT1 A 0 {bSOLID = false ;}
		TNT1 A 0 A_SpawnItem("PB_Arachnotron");
		Stop;

/* 	ReplaceVanilla:
		TNT1 A 0 {bTHRUACTORS = true ;}
		TNT1 A 0 {bCOUNTKILL = false ;}
		TNT1 A 0 A_SpawnItemEx("Vanilla_Arachnotron", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL | SXF_TRANSFERAMBUSHFLAG);
		Stop; */

	Spawn:
		BSPI A 1;

	Stand:
		BSPI A 10 A_Look;
		Loop;

	See:
		BSPI A 1 {A_StartSound("baby/walk", 1); plasmaBallCounter = 0; }
		BSPI AABBBCCC 1 A_CustomChase();
		BSPI D 1;
		BSPI DDDEEEFFF 1 A_CustomChase();
		Loop;

	FrontMove:
		BSPI A 2 {Thrust(1); }
		BSPI AABBBCCC 2 {Thrust(1); A_CustomChase(); }
		BSPI D 2 ;
		BSPI DDDEEEFFF 2 {Thrust(1); A_CustomChase();}
		Goto See;

	SuppressiveFire:
		TNT1 A 0 { self.inSuppressiveFire = true;  }
		TNT1 A 0 { int attackRoll = random(0, 99); if (attackRoll > 50 && suppressCount2 < suppressLimit2) { SetStateLabel("SuppressiveFire2");}}

	
		BSPI A 3 BRIGHT { plasmaBallCounter = 0; }
		BSPI G 6 ;
		BSPI H 2 BRIGHT {self.suppressiveOffZ = 25; self.suppressiveOffXY =  0; self.suppressiveMissile = "ArachnoArtyPlasmaBallSuppress";  A_SuppressiveFire(highRiders : true, pitchOffset:30);if (CheckSight(target)) SetStateLabel("See");suppressCount += 1;}
		BSPI G 6 ;
		BSPI H 2 BRIGHT {self.suppressiveOffZ = 25; self.suppressiveOffXY =  0; self.suppressiveMissile = "ArachnoArtyPlasmaBallSuppress";  A_SuppressiveFire(highRiders : true, pitchOffset:60);if (CheckSight(target)) SetStateLabel("See");suppressCount += 1;}
		BSPI G 6 ;
		BSPI H 2 BRIGHT {self.suppressiveOffZ = 25; self.suppressiveOffXY =  0; self.suppressiveMissile = "ArachnoArtyPlasmaBallSuppress";  A_SuppressiveFire(highRiders : true, pitchOffset:90);if (CheckSight(target)) SetStateLabel("See");suppressCount += 1;}
		BSPI G 6 ;
		BSPI H 2 BRIGHT {self.suppressiveOffZ = 25; self.suppressiveOffXY =  0; self.suppressiveMissile = "ArachnoArtyPlasmaBallSuppress";  A_SuppressiveFire(highRiders : true, pitchOffset:40);if (CheckSight(target)) SetStateLabel("See");suppressCount += 1;}
		
		TNT1 A 0 { self.inSuppressiveFire = false; }
	GoTo FrontMove;

	SuppressiveFire2:
		TNT1 A 0 { self.inSuppressiveFire = true; if (CheckSight(target)) SetState(FindState("See")); } 
	    BSPI G 10;
		BSPI H 2 BRIGHT{ 
						  self.suppressiveOffZ = 25; self.suppressiveOffXY = 0; self.suppressiveMissile = "ArachnoPlasma_Ball";  A_SuppressiveFire(pitchOffset:50);
						  suppressCount2 += 1;
						  if (suppressCount2 < suppressLimit2)
						  {
								SetState(FindState("SuppressiveFire2"));
								self.inSuppressiveFire = false;
						  }
						  else if (suppressCount2 >= suppressLimit2)
						  {
								SetState(FindState("See"));
								self.inSuppressiveFire = false;
						  }
					   }
		GoTo See;

	Missile:
		TNT1 A 0 A_JumpIf(random(0, 99) < 99 && FirstTime, "Shield");
//		TNT1 A 0 {{SetState(FindState("Arty"));}}   /// Setting direct state is for debugging a state/projectile
		BSPI A 2 BRIGHT A_FaceTarget;
		TNT1 A 0 A_JumpIf(random(0, 99) < 40 , "RailGun");
		TNT1 A 0 {SetState(FindState("PlasmaBallAttack"));}

/* 		BSPI H 2 BRIGHT {					/// Will keep just in case
			int allowedChance = 0 ;
			double chance = random(0, 100);
			if (chance > allowedChance)
			{A_DropAdjust2("ArachnoPlasma_Ball","ArachnoPlasma_Ball", 0, 0, 25, speedmult: 1.0, minRange: 0, maxRange: 1200, shootDownward: false);}
			else
			{A_SpawnProjectile("ArachnoPlasma_Ball", 25, 0, 0, 0);} 
			
		} */

		
		Goto See;

	PlasmaBallAttack:
		BSPI G 10;
		BSPI H 2 BRIGHT 			
			{ 
				if (plasmaBallCounter <= 14 && HasClearShotIgnoringShield(self,target) )
				{
					A_FaceTarget();
					A_DropAdjust2("ArachnoPlasma_Ball","ArachnoPlasma_Ball", 0, 0, 25, speedmult: 1.0, minRange: 0, maxRange: 1200, shootDownward: false); plasmaBallCounter += 1;
				//	bool collisionCheck = CanReachTarget("ArachnoPlasma_Ball",30,0,25, tolerance:1, debug : true);
					
					int ArtyChance = 92 ; //92
					double chance = random(0, 100);
					if (chance > ArtyChance)
					{
						artyCounter = 0; SetState(FindState("Arty"));
					}
					
					else
						SetState(FindState("PlasmaBallAttack"));
				}

				else if (plasmaBallCounter > 14 && HasClearShotIgnoringShield(self,target))
					{
						SetState(FindState("RailGun")); 
					}
				else if (plasmaBallCounter <= 14 && !HasClearShotIgnoringShield(self,target) )
					{
						SetState(FindState("RailGun")); 
					}
				
				else
				{
					SetState(FindState("See")); 
				}
			}

		Goto See;
	
	Shield:
		TNT1 A 0 {FirstTime = false; A_SpawnItemEx("Shield",pos.x,pos.y,pos.z,flags: SXF_SETMASTER); }
		Goto Arty;
	Arty:
		
		BSPI A 3 BRIGHT {A_FaceTarget(); plasmaBallCounter = 0; if(target && Distance3d(target) > 1800) { SetState(FindState("Missile"));  } }
		BSPI G 6 A_FaceTarget;
		BSPI H 2 BRIGHT {A_SpawnProjectile("ArachnoArtyPlasmaBall", 25, 0, 0, 0);  artyCounter += 1; }
		BSPI G 6 A_FaceTarget;
		BSPI H 2 BRIGHT {A_SpawnProjectile("ArachnoArtyPlasmaBall", 25, 0, 0, 0);  artyCounter += 1; }
		BSPI G 6 A_FaceTarget;
		BSPI H 2 BRIGHT {A_SpawnProjectile("ArachnoArtyPlasmaBall", 25, 0, 0, 0);  artyCounter += 1; }
		BSPI G 6 A_FaceTarget;
		BSPI H 2 BRIGHT {A_SpawnProjectile("ArachnoArtyPlasmaBall", 25, 0, 0, 0);  artyCounter += 1; }
		
		Goto Missile;
		
	RailGun:
	
		BSPI A 3 BRIGHT {A_FaceTarget(); plasmaBallCounter = 0; }
		BSPI G 8;
		BSPI H 2 BRIGHT {A_DropAdjust2("ArachnoRailGun","ArachnoRailGun", 0, 0, 25, speedmult: 1.0, minRange: 0, maxRange: 1200,forceMinAngle: true);}

		BSPI A 3 BRIGHT {A_FaceTarget(); }
		BSPI G 8;
		BSPI H 2 BRIGHT {A_DropAdjust2("ArachnoRailGun","ArachnoRailGun", 0, 0, 25, speedmult: 1.0, minRange: 0, maxRange: 1200,forceMinAngle : true);}	
		
		BSPI A 3 BRIGHT {A_FaceTarget(); }
		BSPI G 8;
		BSPI H 2 BRIGHT {A_DropAdjust2("ArachnoRailGun","ArachnoRailGun", 0, 0, 25, speedmult: 1.0, minRange: 0, maxRange: 1200,forceMinAngle : true);}	
		Goto See;
	Pain:
		BSPI I 3;
		BSPI I 3 A_Pain;
		Goto See + 1;

	Possession:
		TNT1 A 0 A_SetInvulnerable;
		BSPI I 3;
		BSPI I 3 A_Pain;
		TNT1 A 0 A_UnSetInvulnerable;
		Goto See;

	Pain.Stun:
		TNT1 A 0;
		TNT1 A 0 A_SpawnItemEx("StunElectrocute", random(-4, 4), random(-4, 4), random(16, 32), 0, 0);
		BSPI I 1 A_Pain;
		BSPI IIIIIIIIII 3 A_SpawnItemEx("StunElectrocute", random(-12, 12), random(-12, 12), random(16, 52), 0, 0);
		BSPI I 1 A_Pain;
		BSPI IIIIIIIIII 3 A_SpawnItemEx("StunElectrocute", random(-12, 12), random(-12, 12), random(16, 52), 0, 0);
		BSPI I 1 A_Pain;
		BSPI IIIIIIIIII 3 A_SpawnItemEx("StunElectrocute", random(-12, 12), random(-12, 12), random(16, 52), 0, 0);
		BSPI I 1 A_Pain;
		BSPI IIIIIIIIII 3 A_SpawnItemEx("StunElectrocute", random(-12, 12), random(-12, 12), random(16, 52), 0, 0);
		BSPI I 1 A_Pain;
		BSPI IIIIIIIIII 3 A_SpawnItemEx("StunElectrocute", random(-12, 12), random(-12, 12), random(16, 52), 0, 0);
		BSPI I 1 A_Pain;
		Goto See;

	Pain.Siphon:
		TNT1 AAA 0 A_SpawnItemEx("RedLightning_Small", random(-12, 12), random(-12, 12), random(16, 52), 0, 0);
		BSPI I 1
		{
			A_FaceTarget();
			A_GiveToTarget("HealthBonus", 4);
		}
		BSPI I 5 A_FaceTarget;
		TNT1 A 0 A_Pain;
		Goto See;

	Pain.Kick:
		TNT1 A 0 A_FaceTarget;
		BSPI I 6;
		BSPI I 6 A_Pain;
		Goto See + 1;


	Death:
		TNT1 A 1 { A_BossDeath(); }
		TNT1 A 0 { A_Jump(101, "RareDeath"); }
		BSPI J 8 { A_Scream(); }
		TNT1 AAAAAAAAA 0 { A_SpawnProjectile("CeilBloodLauncherLong", 0, 0, random(0, 360), 2, random(50, 130)); }
		TNT1 AAAA 0 { A_SpawnProjectile("Instestin", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAAAA 0 { A_SpawnProjectile("XDeathBrain1", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAAAA 0 { A_SpawnProjectile("XDeathBrain2", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAAAAAAAAA 0 { A_SpawnProjectile("BloodMist", 50, 0, random(0, 360), 2, random(60, 90)); }
		TNT1 AAA 0 { A_SpawnProjectile("XDeathSpiderNew1", 42, 0, random(0, 360), 2, random(60, 90)); }
		TNT1 AA 0 { A_SpawnProjectile("XDeathSpiderNew2", 42, 0, random(0, 360), 2, random(60, 90)); }
		BSPI K 6 { A_NoBlocking(); }
		BSPI LMNO 8;
		BSPI P 1;
		TNT1 A 0 { A_SpawnItem("GrowingBloodPool"); }
		TNT1 A 0 { A_SpawnItem("PB_DeadSpider", 1); }
		Stop;

	RareDeath:
		TNT1 A 1 { A_BossDeath(); }
		BSPI Q 5 { A_Scream(); }
		TNT1 A 0 { A_SpawnItemEx("ExplosionFlareSpawner", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION); }
		TNT1 A 0 { A_SpawnItemEx("BarrelKaboom", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION); }
		TNT1 A 0
		{
			if (GetCVar("pb_enemyexplosiondamage") == true)
			{
				A_Explode(160, 200);
			}
		}
		TNT1 AAAAA 0 { A_SpawnProjectile("SuperGoreSpawner", 10, 0, random(0, 360), 2, random(0, 180)); }
		TNT1 AAAAAAAAAA 0 { A_SpawnProjectile("SuperGoreSpawner", 0, 0, random(0, 180), 2, random(0, 180)); }
		TNT1 AA 0 { A_SpawnProjectile("SpiderLeg", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAAAAAAAA 0 { A_SpawnProjectile("CeilBloodLauncherLong", 0, 0, random(0, 360), 2, random(50, 130)); }
		TNT1 AAAA 0 { A_SpawnProjectile("Instestin", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAAAAAAAA 0 { A_SpawnProjectile("XDeathBrain1", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAAAAAAAAA 0 { A_SpawnProjectile("XDeathBrain2", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAAAAAAA 0 { A_SpawnProjectile("PB_SpiderPart1", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AA 0 { A_SpawnProjectile("PB_SpiderPart2", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAA 0 { A_SpawnProjectile("PEPart2", 32, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AAAAAAAA 0 { A_SpawnProjectile("Brutal_FlyingBlood", 32, 0, random(0, 360), 2, random(0, 160)); }
		BSPI R 6 { A_NoBlocking(); }
		BSPI STUV 6;
		BSPI WX 2;
		TNT1 A 0 { A_SpawnItem("GrowingBloodPool"); }
		TNT1 A 0 { A_SpawnItem("PB_DeadSpider2", 1); }
		Stop;

	Death.Cutless:
		TNT1 A 0;
		TNT1 A 0 { A_Jump(128, "XDeath"); }
		Goto Death;

	Death.SuperPlasma:
	Death.Plasma:
	Death.Plasma2:
		TNT1 A 1 { A_BossDeath(); }
		TNT1 A 0 { A_Scream(); }
		TNT1 A 0 { A_NoBlocking(); }
		TNT1 AAA 0 { A_SpawnProjectile("Brutal_FlyingBlood", 50, 0, random(0, 360), 2, random(0, 160)); }
		TNT1 AA 0 { A_SpawnProjectile("XDeathBurnedMeat3", 32, 0, random(0, 360), 2, random(0, 160)); }
		EXPL AAAAAA 0 { A_SpawnProjectile("ExplosionSmoke", 32, 0, random(0, 360), 2, random(0, 360)); }
		CARB KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK 7
		{ A_SpawnProjectile("PlasmaSmoke", 15, 0, random(0, 360), 2, random(70, 110)); }
		CARB K -1;
		Stop;

	Death.Fire:
	Death.FireExplosion:
		TNT1 A 0;
		TNT1 A 1 { A_BossDeath(); }
		TNT1 A 0 { A_Scream(); }
		TNT1 A 0 { A_NoBlocking(); }
		TNT1 AAA 0 { A_SpawnProjectile("PEPart2", 32, 0, random(0, 360), 2, random(0, 160)); }
		BSPI LLLL 2 { A_SpawnProjectile("FlameTrails", 45, 0, random(0, 360), 2, random(50, 130)); }
		BSPI MMMM 2 { A_SpawnProjectile("FlameTrails", 30, 0, random(0, 360), 2, random(50, 130)); }
		BSPI NNNN 2 { A_SpawnProjectile("FlameTrails", 25, 0, random(0, 360), 2, random(50, 130)); }
		BSPI OOOO 2 { A_SpawnProjectile("FlameTrails", 25, 0, random(0, 360), 2, random(50, 130)); }
		TNT1 A 0 { A_StartSound("props/redfire"); }
		Stop;
/* 		Goto Burns;
	
	Burns:
		TNT1 A 0;
		TNT1 A 0 { A_GiveInventory("BrutalCounter"); }
		CARB KK 2 { A_SpawnItem("YellowFlare", 0, 20); }
		ID22 F 0 { A_SpawnProjectile("FlameTrails", 20, 0, random(0,360), 2, random(70,110)); }
		CARB KK 2 { A_SpawnItem("YellowFlare", 0, 20); }
		ID22 F 0 { A_SpawnProjectile("FlameTrails", 20, 0, random(0,360), 2, random(70,110)); }
		ID22 F 0 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0,360), 2, random(70,110)); }
		TNT1 A 0 { A_JumpIfInventory("BrutalCounter", 30, "Smokes"); }
    Loop;

	Smokes:
		TNT1 A 0;
		TNT1 A 0 { A_JumpIfInventory("BrutalCounter", 60, "Rest"); }
		TNT1 A 0 { A_GiveInventory("BrutalCounter"); }
		CARB K 5 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0,360), 2, random(70,110)); }
		Loop;

	Rest:
		CARB K -1;
		Stop; */

	Death.Fatality:
		TNT1 A 1 { A_BossDeath(); }
		TNT1 A 0 { A_Pain(); }
		TNT1 A 0 { A_JumpIfInTargetInventory("FistsSelected", 1, "Death"); }
		TNT1 A 0 { A_Jump(128, "Death.Fatality2"); }
		TNT1 A 0 { A_GiveToTarget("GoFatality", 1); }
		TNT1 A 0 { A_GiveToTarget("ArachnotronFatality", 1); }
		TNT1 A 1 { A_BossDeath(); }
		TNT1 A 0;
		Stop;

	Death.Fatality2:
		TNT1 A 1 { A_BossDeath(); }
		TNT1 A 0 { A_GiveToTarget("GoFatality", 1); }
		TNT1 A 0 { A_GiveToTarget("ArachnotronFatality2", 1); }
		TNT1 A 1;
		TNT1 A 0;
		Stop;

	// --- Death.Cut and Death.Saw ---
	Death.Cut:
	Death.Saw:
		TNT1 AAAAA 0 { A_SpawnProjectile("Instestin2", 14, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAAA 0 { A_SpawnProjectile("CeilBloodLauncher", 40, 0, random(0,360), 2, random(50,130)); }
		TNT1 AAAAA 0 { A_SpawnProjectile("XDeath1", 10, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAA 0 { A_SpawnProjectile("XDeath2", 10, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAAAAAAAAAA 0 { A_SpawnProjectile("PlayerFlyingBlood", 50, 0, random(0,360), 2, random(0,160)); }
		TNT1 A 0 { A_SpawnProjectile("XDeathArachnotronHead", 50, 0, random(0,360), 2, random(40,130)); }
		TNT1 A 0 { A_NoBlocking(); }
		ARF2 F 16;
		ARF2 G 8 { A_BossDeath(); }
		TNT1 A 0 { A_SpawnItemEx("PB_NoLegsSpider", 0, 1, 1, 1, 1); }
		Stop;

	// --- Death.Crush / XDeath ---
	Death.Crush:
	XDeath:
		TNT1 A 1 { A_BossDeath(); }
		BSPI J 4;
		TNT1 A 0 { A_SpawnItemEx("ExplosionFlareSpawner", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION); }
		TNT1 A 0 { A_SpawnItemEx("BarrelKaboom", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION); }
		TNT1 A 0
		{
			if (GetCVar("pb_enemyexplosiondamage") == true)
			{
				A_Explode(160, 200);
			}
		}
		TNT1 A 0 { A_Jump(64, "XDeathRare"); }
		TNT1 AAAAA 0 { A_SpawnProjectile("SuperGoreSpawner2", 50, 0, random(0,360), 2, random(0,180)); }
		TNT1 AAAAAAAAAA 0 { A_SpawnProjectile("SuperGoreSpawner2", 30, 0, random(0,180), 2, random(0,180)); }
		TNT1 AA 0 { A_SpawnProjectile("SpiderLeg", 32, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAAAAAA 0 { A_SpawnProjectile("CeilBloodLauncherLong", 0, 0, random(0,360), 2, random(50,130)); }
		TNT1 AAAA 0 { A_SpawnProjectile("Instestin", 32, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAAAAAA 0 { A_SpawnProjectile("XDeathBrain1", 32, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAAAAAAA 0 { A_SpawnProjectile("XDeathBrain2", 32, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAAAAA 0 { A_SpawnProjectile("PB_SpiderPart1", 32, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAA 0 { A_SpawnProjectile("XDeathSpiderNew1", 32, 0, random(0,360), 2, random(60,90)); }
		TNT1 AAA 0 { A_SpawnProjectile("XDeathSpiderNew2", 32, 0, random(0,360), 2, random(60,90)); }
		TNT1 AAA 0 { A_SpawnProjectile("PEPart2", 32, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAAAAA 0 { A_SpawnProjectile("Brutal_FlyingBlood", 32, 0, random(0,360), 2, random(0,160)); }
		XBSP A 6 { A_NoBlocking(); }
		XBSP BCD 6;
		XBSP D 1;
		TNT1 A 0 { A_SpawnItem("GrowingBloodPool"); }
		TNT1 A 0 { A_SpawnItem("PB_XDeadSpider", 1); }
		Stop;
/* 		Goto XBurns;

	// --- XBurns / XSmokes / XRest ---
	XBurns:
		TNT1 A 0;
		TNT1 A 0 { A_JumpIfInventory("BrutalCounter", 20, "XSmokes"); }
		TNT1 A 0 { A_GiveInventory("BrutalCounter"); }
		TNT1 DD 2 { A_SpawnItem("YellowFlare", 0, 20); }
		ID22 F 0 { A_SpawnProjectile("FlameTrails", 20, 0, random(0,360), 2, random(70,110)); }
		TNT1 DD 2 { A_SpawnItem("YellowFlare", 0, 20); }
		XBSP D 0 { A_SpawnProjectile("FlameTrails", 20, 0, random(0,360), 2, random(70,110)); }
		XBSP D 0 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0,360), 2, random(70,110)); }
		TNT1 A 0 { A_JumpIfInventory("BrutalCounter", 30, "XSmokes"); }
		Loop;

	XSmokes:
		TNT1 A 0;
		TNT1 A 0 { A_JumpIfInventory("BrutalCounter", 100, "XRest"); }
		TNT1 A 0 { A_GiveInventory("BrutalCounter"); }
		TNT1 D 5 { A_SpawnProjectile("PlasmaSmoke", 40, 0, random(0,360), 2, random(70,110)); }
		Loop;

	XRest:
		TNT1 A 0;
		Stop; */
		
	Raise:
		BSPI P 5;
		BSPI ONMLKJ 5;
		Goto See + 1;

	Crush:
		TNT1 A 0 { A_StartSound("misc/xdeath4"); }
		CRS3 A 5 { A_BossDeath(); }
		CRS3 A -1;
		Stop;

	XDeathRare:
		TNT1 A 1 { A_BossDeath(); }
		TNT1 A 0 { A_SpawnProjectile("XDeathArachnotronHead", 50, 0, random(0,360), 2, random(40,130)); }
		TNT1 AA 0 { A_SpawnProjectile("SpiderLeg", 32, 0, random(0,360), 2, random(0,160)); }
		TNT1 AAAAAAAAA 0 { A_SpawnProjectile("CeilBloodLauncherLong", 0, 0, random(0,360), 2, random(50,130)); }
		XBSP A 6 { A_NoBlocking(); }
		XBSP BCD 6;
		XBSP D 1; // Equivalent to A_BossDeath
		TNT1 A 0 { A_SpawnItem("GrowingBloodPool"); }
		TNT1 A 0 { A_SpawnItem("PB_XDeadSpider", 1); }
//		Goto XBurns;
		Stop;

	Death.Ice:
	Death.IceExplosion:
	Death.Freeze:
	Death.Frost:
		TNT1 A 1 { A_BossDeath(); }
		TNT1 A 0 {bSHOOTABLE = false ;}
		TNT1 A 0 {bSOLID = false ;}
		TNT1 A 0 { A_SpawnItem("FrozenArachnotron"); }
		Stop;

	Death.Massacre:
		Goto Death;

	}
}

Class ArachnoRailGun: FastProjectile
{
	private Actor hitvictim; 
	int Projectile_Damage;
	Default
	{
		Speed 70;
		Radius 5;
		Height 3;
		SeeSound "RailFire";
	//	DeathSound "RailExp";
	}
	
	
	
	override void PostBeginPlay() 
    {
        super.PostBeginPlay();
		Projectile_damage = random(20, 30);
    }
	
	override int SpecialMissileHit(Actor victim) 
    {
		
        if (victim && target && (victim != target)) 
        {
			
            if (victim != hitvictim)  // Deal damage only once per pass-through.
            {
				
				if (victim.GetClassName() == target.GetClassName())
				{

					return 1;
				}
				
				if (victim.species == target.species)
				{

					return 1;
				}

				if (victim is  "Shield")
				{
					return 1;
				}
                hitvictim = victim;
                
				if (victim.player)
					{Projectile_damage = random(13,19); victim.DamageMobj(self, self.target, Projectile_damage, "Plasma");}
				else
					{Projectile_damage = random(24,37); victim.DamageMobj(self, self.target, Projectile_damage, "Plasma");}

            }
        }

		return 1;
    }

	Action Void PB_SpawnRailShockWave(vector3 where,bool red = 0,int it = 0)
	{
		FSpawnParticleParams ShockWv;
		string tx = red ? "PBSWV1" : "PBSWV2";
		ShockWv.Texture = TexMan.CheckForTexture(tx);
		ShockWv.Style = STYLE_ADD;
		ShockWv.Color1 = "FFFFFF";
		ShockWv.Flags = SPF_ROLL|SPF_FULLBRIGHT|SPF_NOTIMEFREEZE;
		ShockWv.Startroll = randompick(0,360);
		ShockWv.RollVel = 0;
		ShockWv.StartAlpha = 1.0;
		//this looks cool, the shockwave grows with the distance, and first fades out the nearest ones, but pb ones are really fast and all with the same size
		//ShockWv.Lifetime = (20 + it); //adds the actual iteration to the life time
		//ShockWv.FadeStep = (1.0 / ShockWv.Lifetime); //then just do default particle fade thing (alpha / lifetime)
		ShockWv.Lifetime = 20;
		ShockWv.FadeStep = 0.05;
		ShockWv.Size = red ? 20 : 5;
		ShockWv.SizeStep = red ? 10 : 5;
		ShockWv.Pos = where;
		Level.SpawnParticle(ShockWv);
	}

	Action Void PB_DrawRailFxBlue(vector3 where)
	{

		FSpawnParticleParams BlueRailPx;
		int fm = random(1,4);
		BlueRailPx.Texture = TexMan.CheckForTexture("BlueR"..fm);
	//	BlueRailPx.Color1 = String.Format("%d %d %d", r, g, b);; //"FFFFFF"
		BlueRailPx.Color1 = "FFFFFF";

		BlueRailPx.Style = STYLE_Add;
		BlueRailPx.Flags = SPF_ROLL|SPF_FULLBRIGHT|SPF_NOTIMEFREEZE;
		BlueRailPx.Vel = (0,0,0); 
		BlueRailPx.Startroll = randompick(0,180);
		BlueRailPx.RollVel = 0;
		BlueRailPx.StartAlpha = 1.0;
		BlueRailPx.FadeStep = 0.05;
		BlueRailPx.Size = 25;
		BlueRailPx.SizeStep = -2;
		BlueRailPx.Lifetime = random(30,40); 
		BlueRailPx.Pos = where;
		Level.SpawnParticle(BlueRailPx);
		
		
		FSpawnParticleParams BlueRailSmoke;
		string f = String.Format("%c", int("A") + random(0,3)); //this feels so illegal :p
		BlueRailSmoke.Texture = TexMan.CheckForTexture("SMO1"..f..0);
		BlueRailSmoke.Color1 = "0 204 0"; //"33B2FF";
		BlueRailSmoke.Style = STYLE_ADD;
		BlueRailSmoke.Flags = SPF_ROLL|SPF_FULLBRIGHT|SPF_NOTIMEFREEZE;
		vector3 offsv = (random(-5,5),random(-5,5),random(-5,5)); 
		BlueRailSmoke.Vel = (0,0,0);
		BlueRailSmoke.Startroll = randompick(0,180);
		BlueRailSmoke.RollVel = random(-2,2);
		BlueRailSmoke.StartAlpha = 0.66;
		BlueRailSmoke.FadeStep = 0.01;
		BlueRailSmoke.Size = random(20,35);
		BlueRailSmoke.SizeStep = -0.5;
		BlueRailSmoke.Lifetime = random(70,105); 
		//spawn 2
		BlueRailSmoke.Pos = where + offsv;
		Level.SpawnParticle(BlueRailSmoke);
		BlueRailSmoke.Pos = where - offsv;
		Level.SpawnParticle(BlueRailSmoke);
	}

	States
	{
		Spawn: 	
			TNT1 A 1 {PB_DrawRailFxBlue(self.pos); }
		Spawn2:
			TNT1 A 1 PB_DrawRailFxBlue(self.pos);
			Loop;
		Death:
			TNT1 A 0 { PB_SpawnRailShockWave(self.pos,0,2); A_StartSound("RailExp", 0,0, 1.0); }
			Stop;
	}

}


Class ArachnoArtyPlasmaBallSuppress: PB_Monster_Projectile
{
	    Default
    {
		Projectile;
        SeeSound "PLSULT";
		DeathSound "PlasmaArtExp";
        DamageFunction 0;
		Damage 0;
        DamageType "Plasma";
        Speed 40;

        -THRUACTORS;
        -THRUSPECIES;
        -MTHRUSPECIES;
        +THRUGHOST;
//		+NOTIMEFREEZE;
        Scale 0.5;
		Radius 14;
		Height 7;
		Gravity 0;
		+RANDOMIZE;
		
		//+SHOOTABLE;
		//-NOBLOCKMAP;
		+NOBLOCKMAP;
		+NOBLOOD;
		+NORADIUSDMG;
		+THRUSPECIES;
		+MTHRUSPECIES;
		renderstyle "Add";
		Obituary "$OB_MPPLASMARIFLE";
    }
	
		override void BeginPlay()
    {
		drop_rate = -5;  
        Super.BeginPlay();
    }
	
	
	void SpawnPlasmaSmoke()
	{
		FSpawnParticleParams Plsmk;
		Plsmk.Texture = TexMan.CheckForTexture("X103"..String.Format("%c", 97 + random(0, 25)).."0");
		Plsmk.Style = STYLE_TRANSLUCENT;
		Plsmk.Color1 = "404040";
		vector3 vls = (frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(0.2,0.4));
		if(pos.z >= ceilingz - 2)
			vls.z *= -1;
		Plsmk.vel = vls;
		//Plsmk.accel = -(vls * 0.02);
		Plsmk.Flags = SPF_ROLL;
		Plsmk.StartRoll = random(0,360);
		Plsmk.RollVel = random(-4,4);
		Plsmk.StartAlpha = 1.0;
		Plsmk.FadeStep = 0.080;
		Plsmk.Size = random(50,74);
		Plsmk.SizeStep = random(2,4);
		Plsmk.Lifetime = 12; 
		Plsmk.Pos = pos;
		Level.SpawnParticle(Plsmk);
	}
	
	void SlowExplodeNoPain(double projdamage, double radius, Name damagetype)
	{
		
		BlockThingsIterator it = BlockThingsIterator.Create(self, radius);
		Actor Thing;
		
		while (it.Next())
		{
			 Thing = it.thing;
			 // Make sure the thing exists and is really within radius.
			 if (!Thing || Distance2D(Thing) > radius)
			 {
				 continue;
			 }

			if(Thing)
			{
				 if (Thing == target)
				 {
					 continue;
				 }
				 // Skip actors of the same species as the source.
				 // Note: This assumes that the 'species' property is defined.
				 if (target && Thing.species == target.species)
				 {
					 continue;
				 }

				 if (!Thing.bShootable || !Thing.bSolid)
				 {
					 continue;
				 }
				 if (Thing && Thing.health <= 0)
				 {
					 continue;
				 }
				 
				 double angle = AngleTo(Thing);
				 Thing.DamageMobj(self, self, 1, damagetype, DMG_NO_PAIN, angle);
				
				if (Thing.player)
				{
					if (Thing.bInvulnerable || Thing.player.cheats & CF_GODMODE || Thing.player.cheats & CF_GODMODE2)
						continue;

					else
					{
						PlayerInfo P = Thing.player;
						P.health -= projdamage; // Modify player health via the PlayerInfo struct
						
						if (P.health <= 0)
						{
							P.health = 0; // Prevent negative health
							Thing.Die(self, self); // Force death state
						}
						
						Thing.A_SetBlend("116 123 229", 0.4, 24);
					}

				}
				else
				{Thing.DamageMobj(self, self, projdamage, damagetype, DMG_NO_PAIN, angle);}

				 
	 
			}
		}
	}
	
	States 
	{
		Spawn:
/* 			DB19 A 2 BRIGHT { ThrustThingZ(0, drop_rate, 0, 1); }
			TNT1 A 0 { ThrustThingZ(0, drop_rate, 0, 1); }
			DB19 B 2 BRIGHT { ThrustThingZ(0, drop_rate, 0, 1); }
			TNT1 A 0 { ThrustThingZ(0, drop_rate, 0, 1); }
			DB19 C 2 BRIGHT { ThrustThingZ(0, drop_rate, 0, 1); }
			TNT1 A 0 { ThrustThingZ(0, drop_rate, 0, 1); }
			Loop; */
			PLAR ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 BRIGHT { ThrustThingZ(0, drop_rate, 0, 1); }
			PLR2 ABCDEFGHIJKLMOPQRS 1 { ThrustThingZ(0, drop_rate, 0, 1); }

			Loop;
		
		Death:
			TNT1 A 0 {A_SpawnItem ("Plasma_Puff", 0); SlowExplodeNoPain(12,90,"Plasma");}  // SlowExplodeNoPain(15,80,"Plasma");}
			TNT1 B 1; //A_Explode(6,50,1)
			TNT1 A 0 A_SpawnItemEx ("DetectFloorCraterSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx ("DetectCeilCraterSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnProjectile ("BluePlasmaFire", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 AAA 0 A_SpawnProjectile ("BluePlasmaParticle", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 B 4;
			TNT2 AAAAAA 9 SpawnPlasmaSmoke();//A_SpawnProjectile ("PlasmaSmoke", 1, 0, random (0, 360), 2, -random (0, 160));
			Stop;
			
		Xdeath:
			TNT1 A 0 A_SpawnItem ("Plasma_Puff", 0);
			TNT1 A 0 A_SpawnProjectile ("BluePlasmaFire", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 AAAA 0 A_SpawnProjectile ("RailGunTrailSpark", 0, 0, random (0, 360), 2, random (0, 360));
		///	TNT1 A 1 A_Explode(8,50,0);
			TNT1 A 0 {SlowExplodeNoPain(12,90,"Plasma");}
			TNT1 A 4;
			TNT2 AAA 9 SpawnPlasmaSmoke();//A_SpawnProjectile ("PlasmaSmoke", 1, 0, random (0, 360), 2, -random (0, 160));
			Stop;
		
		
	}
	
}

Class ArachnoArtyPlasmaBall : ArachnoPlasma_Ball
{
	
     int mySpawnIndex;

    // Position where the projectile should be attached (updated every tick)
    int targetX, targetY, targetZ;

    // Number of tics remaining in the attachment phase
    int ticsRemaining;

    // Flag to ensure launch happens only once
    bool launched;

    // The shooter (monster) that fired the missile
    Actor owner;

    // The final target that the missile should launch toward
    Actor finalTarget;

    Default
    {
        SeeSound "PLSULT";
		DeathSound "PlasmaArtExp";
        DamageFunction 0;
		Damage 0;
        DamageType "Plasma";
        Speed 40;
        -THRUACTORS;
        -THRUSPECIES;
        -MTHRUSPECIES;
        +THRUGHOST;
//		+NOTIMEFREEZE;

		+NOBLOCKMAP;
		+NOBLOOD;
		+NORADIUSDMG;
/* 		+THRUSPECIES;
		+MTHRUSPECIES; */
//        Scale 0.5;
		Scale 0.4;
		Radius 14;
		Height 7;
    }
	

    
	override void BeginPlay()
    {
		drop_rate = 0;  
        Super.BeginPlay();
    }
	
    Override void PostBeginPlay()
    {
        Super.PostBeginPlay();
        ticsRemaining = 45;
        launched = false;
        
        if (target)
        {
            // Attempt to cast the missile's target (which should be the shooter)
            PB_Arachnotron1 myOwner = PB_Arachnotron1(target);
/*             if (myOwner == null)
            {
                Console.Printf("ArachnoArtyPlasmaBall: FAILED to cast target to PB_Arachnotron1.\n");
            } */
            if (myOwner != null)
            {

				int spawnRemap[4] = { 0, 1, 2, 3 };    // Rearranges the order properly
			//	mySpawnIndex = spawnRemap[myOwner.artyCounter % 4];
         //       mySpawnIndex = myOwner.artyCounter % 4;
				mySpawnIndex = (myOwner.artyCounter - 1) % 4;

           //     Console.Printf("ArachnoArtyPlasmaBall: Post-Increment artyCounter = %d, mySpawnIndex = %d\n", myOwner.artyCounter, mySpawnIndex);
				
            }
            
            // Assign owner regardless of cast result (for safety)
            owner = target;
            finalTarget = owner.target;
        }

    }
    
    Override void Tick()
    {
        Super.Tick();
        
        // During the attachment phase, update the missile's offset position based on the owner's current position.
        if (ticsRemaining > 0 && owner != null)
        {
            double angleRad = owner.Angle;
            double cosA = cos(angleRad);
            double sinA = sin(angleRad);

            // Offset arrays for each of the four positions.
            double xOffsets[4] = { 30, 30, 70, 70 };
            double yOffsets[4] = { -30, 30, -30, 30 };
            double zOffsets[4] = { 80, 80, 40, 40 };

            double xOffset = xOffsets[mySpawnIndex];
            double yOffset = yOffsets[mySpawnIndex];
            double zOffset = zOffsets[mySpawnIndex];

            // Calculate the desired (attached) position relative to the owner.
            targetX = owner.pos.x + xOffset * cosA - yOffset * sinA;
            targetY = owner.pos.y + xOffset * sinA + yOffset * cosA;
            targetZ = owner.pos.z + zOffset;

            // Pull the missile toward the offset with an attach factor.
            double attachFactor = 0.7;  // Increase for faster attachment
            self.vel.x = (targetX - pos.x) * attachFactor;
            self.vel.y = (targetY - pos.y) * attachFactor;
            self.vel.z = (targetZ - pos.z) * attachFactor;

            ticsRemaining--;
        }
        // Once the attachment phase is finished, launch the projectile just once.
        else if (!launched)
        {
            if (finalTarget != null)
            {
                double dx = finalTarget.X - pos.x;
                double dy = finalTarget.Y - pos.y;
                double dz = finalTarget.Z + finalTarget.Height * 0.5 - pos.z;
                double distance = sqrt(dx*dx + dy*dy + dz*dz);

                double launchSpeed = 160.0;  // Adjust to set how fast it launches
                if (distance > 0)
                {
                    self.vel.x = (dx / distance) * launchSpeed;
                    self.vel.y = (dy / distance) * launchSpeed;
                    self.vel.z = (dz / distance) * launchSpeed; 
					AdjustFromVel();
                }
            }
            launched = true;
        }
		
		if (mySpawnIndex == 2 || mySpawnIndex == 3)
		{

			if (self.target && self.target.target) 
			{
				Actor newTarget = self.target.target; 

				
				double dx = newTarget.X - self.pos.x;
				double dy = newTarget.Y - self.pos.y;
				double dz = newTarget.Z - self.pos.z;
				double newTargetDistance = sqrt(dx*dx + dy*dy + dz*dz);

				// If the distance is exactly 200, print a message
				if (newTargetDistance < 200)
				{
					//Console.Printf("\caTarget is close");
				}
			}
		}
		
    }
	
	void AdjustFromVel()
	{
		if(!self.target || !self.target.target)
			return;
		double drop_rateZ = -5.0/4.0;
		vector3 diff = (self.target.target.pos.x - self.pos.x, self.target.target.pos.y - self.pos.y, 0);
		double diffMag = sqrt(diff.x * diff.x + diff.y * diff.y); if(diffMag < 0.0001) diffMag = 0.0001;
		vector3 horizDir = (diff.x / diffMag, diff.y / diffMag, 0);
		int drop_rateZ_int = -5;
		let proj_cast = PB_Monster_Projectile(self);
		proj_cast.drop_rate = drop_rateZ_int;
		let [t, Vx, Vz, dist] = AdjustProjectileForArc2(self, self.target.target, drop_rateZ);
		bool arcClear = CheckArcUnobstructed(self,self.pos,horizDir,dist,t,Vx,Vz,drop_rateZ,30,20,0,0,"Line3d",self.target.target);
//				Console.Printf("Primary arc clear? %s", (arcClear ? "Yes" : "No"));

		if(!arcClear)
		{

			int drop_rateZ_int = -3;
			drop_rateZ = -3.0/4.0;
			let proj_cast = PB_Monster_Projectile(self);
			proj_cast.drop_rate = drop_rateZ_int;
			let [t, Vx, Vz, dist] = AdjustProjectileForArc2(self, self.target.target, drop_rateZ);

			
			bool arcClear2 = CheckArcUnobstructed(self,self.pos,horizDir,dist,t,Vx,Vz,drop_rateZ,30,20,0,0,"LaserBlast",self.target.target);
//					Console.Printf("Secondary arc clear? %s", (arcClear2 ? "Yes" : "No"));
			
			if(!arcClear2)
			{
				int drop_rateZ_int = -1;
				drop_rateZ = -1.0/4.0;
	//			let proj_cast = BaronMeteor(self);
				proj_cast.drop_rate = drop_rateZ_int;
				let [t, Vx, Vz,dist] = AdjustProjectileForArc2(self, self.target.target, drop_rateZ);
				
		//		bool arcClear3 = CheckArcUnobstructed(self,self.pos,horizDir,dist,t,Vx,Vz,drop_rateZ,30,20,0,0,"YellowLaser");
		//		Console.Printf("Ternary arc clear? %s", (arcClear3 ? "Yes" : "No"));
			}
		}
			
	}
	
	void SlowExplodeNoPain(double projdamage, double radius, Name damagetype)
	{
		
		BlockThingsIterator it = BlockThingsIterator.Create(self, radius);
		Actor Thing;
		
		while (it.Next())
		{
			 Thing = it.thing;
			 // Make sure the thing exists and is really within radius.
			 if (!Thing || Distance3D(Thing) > radius)
			 {
				 continue;
			 }

			if(Thing)
			{
				 if (Thing == target)
				 {
					 continue;
				 }
				 // Skip actors of the same species as the source.
				 // Note: This assumes that the 'species' property is defined.
				 if (target && Thing.species == target.species)
				 {
					 continue;
				 }

				 if (!Thing.bShootable || !Thing.bSolid)
				 {
					 continue;
				 }
				 if (Thing && Thing.health <= 0)
				 {
					 continue;
				 }
				 
				 double angle = AngleTo(Thing);
				 Thing.DamageMobj(self, self, 1, damagetype, DMG_NO_PAIN, angle);
				
				if (Thing.player)
				{
					
					
					if (Thing.bInvulnerable || Thing.player.cheats & CF_GODMODE || Thing.player.cheats & CF_GODMODE2)
						continue;

					else
					{
						PlayerInfo P = Thing.player;
						P.health -= projdamage; // Modify player health via the PlayerInfo struct
						
						if (P.health <= 0)
						{
							P.health = 0; // Prevent negative health
							Thing.Die(self, self); // Force death state
						}
						
						Thing.A_SetBlend("116 123 229", 0.4, 24);
					}
					

				}
				else
				{Thing.DamageMobj(self, self, projdamage, damagetype, DMG_NO_PAIN, angle);}

				 
	 
			}
		}
	}
	
	States 
	{
		Spawn:
/* 			DB19 A 2 BRIGHT { ThrustThingZ(0, drop_rate, 0, 1); }
			TNT1 A 0 { ThrustThingZ(0, drop_rate, 0, 1); }
			DB19 B 2 BRIGHT { ThrustThingZ(0, drop_rate, 0, 1); }
			TNT1 A 0 { ThrustThingZ(0, drop_rate, 0, 1); }
			DB19 C 2 BRIGHT { ThrustThingZ(0, drop_rate, 0, 1); }
			TNT1 A 0 { ThrustThingZ(0, drop_rate, 0, 1); }
			Loop; */
			PLAR ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 BRIGHT { ThrustThingZ(0, drop_rate, 0, 1); }
			PLR2 ABCDEFGHIJKLMOPQRS 1 { ThrustThingZ(0, drop_rate, 0, 1); }

			Loop;
		
		Death:
			TNT1 A 0 {A_SpawnItem ("Plasma_Puff", 0); SlowExplodeNoPain(12,90,"Plasma");}  // SlowExplodeNoPain(15,80,"Plasma");}
			TNT1 B 1; //A_Explode(6,50,1)
			TNT1 A 0 A_SpawnItemEx ("DetectFloorCraterSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx ("DetectCeilCraterSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnProjectile ("BluePlasmaFire", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 AAA 0 A_SpawnProjectile ("BluePlasmaParticle", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 B 4;
			TNT2 AAAAAA 9 SpawnPlasmaSmoke();//A_SpawnProjectile ("PlasmaSmoke", 1, 0, random (0, 360), 2, -random (0, 160));
			Stop;
			
		Xdeath:
			TNT1 A 0 A_SpawnItem ("Plasma_Puff", 0);
			TNT1 A 0 A_SpawnProjectile ("BluePlasmaFire", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 AAAA 0 A_SpawnProjectile ("RailGunTrailSpark", 0, 0, random (0, 360), 2, random (0, 360));
		///	TNT1 A 1 A_Explode(8,50,0);
			TNT1 A 0 {SlowExplodeNoPain(8,90,"Plasma");}
			TNT1 A 4;
			TNT2 AAA 9 SpawnPlasmaSmoke();//A_SpawnProjectile ("PlasmaSmoke", 1, 0, random (0, 360), 2, -random (0, 160));
			Stop;
		
		
	}


		

}

class ShieldPuff: Actor 
{
	Default
	{
		renderstyle "Normal";
		Scale 0.3;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOEXTREMEDEATH;
		+PUFFONACTORS;
//		+BLOODLESSIMPACT ;
		+FORCEXYBILLBOARD;
		+DONTSPLASH;
		vspeed 0;
		speed 0;
	}
	states
	{
		Spawn:
			TNT1 A 0 nodelay { A_Stop(); A_StartSound("ShieldHit",0); }
			SHPA ABCDEFGHIJKLM 1;
			Stop;
	}
}

class Shield : Actor
{
    Actor ownerActor; // Reference to the spawning actor

    Default
    {
        Health 300;
        Radius 70;
        Height 75;
		SeeSound "";
        DeathSound "";
        RenderStyle "Normal";
        Scale 0.28;
        Bloodtype "ShieldPuff";
		Species "Arachnotron";
		+SOLID;
        +SHOOTABLE;
		-NOBLOOD;
		+NOBLOODDECALS;
		DamageFactor "Crush", 10.0;
		DamageFactor "Avoid", 0.0;
		DamageFactor "killme", 0.0;
		DamageFactor "GibRemoving", 0.0;
		DamageFactor "TeleportRemover", 0.0;
		DamageFactor "CauseObjectsToSplash", 0.0;
		DamageFactor "Blood", 0.0;
		DamageFactor "BlueBlood", 0.0;
		DamageFactor "GreenBlood", 0.0;
		DamageFactor "Cutless", 0.3;
		DamageFactor "Bullet", 0.4;
		DamageFactor "Shotgun", 0.2;
		DamageFactor "SSG", 0.3;
		DamageFactor "Fire", 0.2;
		DamageFactor "Nail", 0.2;
		DamageFactor "Incinerate", 0.2;
		DamageFactor "Explosive", 0.5;
		DamageFactor "Plasma", 1.2;
		DamageFactor "Freeze", 1.3;
		DamageFactor "Normal", 0.5;

    }

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) 
	{
		if (inflictor && inflictor.bRipper)
        {
            inflictor.Destroy(); 
        }
		
		if (ownerActor) 
		{
			int finalDamage = ApplyDamageFactor(mod, damage);

	//		Console.PrintF("\cn Shield absorbing damage: %d", finalDamage);
			return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		}
		
		return 0; 
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		Name otherClass = other.GetClassName();
		
		if (otherClass == 'Shield' || otherClass == 'ArachnoArtyPlasmaBall' ||
			otherClass == 'ArachnoArtyPlasmaBallSuppress' || otherClass == 'ArachnoPlasma_Ball')
		{
//			Console.PrintF("\czPassed thru!");
			return false;
		}
		return Super.CanCollideWith(other, passive);
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		if (master)
		{
			ownerActor = master;
			SetOrigin(ownerActor.Pos, false);
			PB_Arachnotron1 owner = PB_Arachnotron1(master);
			if (owner != null)
			{
				owner.shieldActive = true;
				owner.bShootable = false;
				owner.bNopain = true;

			}

		}
		
	}

    override void OnDestroy()
    {
        if (master)
        {
            PB_Arachnotron1 owner = PB_Arachnotron1(master);
            if (owner != null)
            {
                owner.shieldActive = false;
				owner.bShootable = true;
				owner.bNopain = false;

            }
        }
        Super.OnDestroy();
    }

    override void Tick()
    {
        Super.Tick();

        if (ownerActor)
        {
            SetOrigin(ownerActor.Pos, false);

        }
        else
        {
            Destroy(); // If the owner is gone, remove the shield

        }
    }
	
		States
	{
		Spawn:
			TNT1 A 0 {A_StartSound("ShieldLoop",4,CHANF_LOOP);}
			SHIA ADGJMPSVY 1;
			SHIB ADGJMPSVY 1;
			SHIC ADGJMPST 1;
			Loop;
			
		Death:
			TNT1 A 0;
			Stop;
	}
}



Class ArachnoPlasma_Ball : PB_Monster_Projectile 
{
	default
	{
		Radius 10;
		//Height 2;
		Height 10;
		Speed 60;
		DamageFunction random(12,16);
		DamageType "Plasma";
		Decal "SmallerScorch";
		Projectile;
		Gravity 0;
		+RANDOMIZE;
		
		//+SHOOTABLE;
		//-NOBLOCKMAP;
		+NOBLOCKMAP;
		+NOBLOOD;
		+NORADIUSDMG;
/* 		+THRUSPECIES;
		+MTHRUSPECIES; */
		//Species "Marines";
		//damagefactor "Blood", 0.0; damagefactor "BlueBlood", 0.0; damagefactor "GreenBlood", 0.0; damagefactor "Taunt", 0.0; damagefactor "KillMe", 0.0; damagefactor "Shrapnel", 0.0;
		//Health 5;
		
		renderstyle "Add";
		Scale 0.19;
		DeathSound "PlasmaExp";
		SeeSound "PlasmaFire";
		Obituary "$OB_MPPLASMARIFLE";
	}
	

	
	States
	{
		Spawn:
			DB19 ABC 1 BRIGHT Light("PLASMABALLSMALL");
			Loop;

		Xdeath:
			TNT1 A 0 A_SpawnItem ("Plasma_Puff", 0);
			TNT1 A 0 A_SpawnProjectile ("BluePlasmaFire", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 AAAA 0 A_SpawnProjectile ("RailGunTrailSpark", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 A 1 A_Explode(8,50,0);
			TNT1 A 4;
			TNT2 AAA 9 SpawnPlasmaSmoke();//A_SpawnProjectile ("PlasmaSmoke", 1, 0, random (0, 360), 2, -random (0, 160));
			Stop;

		Death:
			TNT1 A 0 A_SpawnItem ("Plasma_Puff", 0);
			TNT1 B 1; //A_Explode(6,50,1)
			TNT1 A 0 A_SpawnItemEx ("DetectFloorCraterSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx ("DetectCeilCraterSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnProjectile ("BluePlasmaFire", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 AAA 0 A_SpawnProjectile ("BluePlasmaParticle", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 B 4;
			TNT2 AAAAAA 9 SpawnPlasmaSmoke();//A_SpawnProjectile ("PlasmaSmoke", 1, 0, random (0, 360), 2, -random (0, 160));
			Stop;
	}
	
	void SpawnPlasmaSmoke()
	{
		FSpawnParticleParams Plsmk;
		Plsmk.Texture = TexMan.CheckForTexture("X103"..String.Format("%c", 97 + random(0, 25)).."0");
		Plsmk.Style = STYLE_TRANSLUCENT;
		Plsmk.Color1 = "404040";
		vector3 vls = (frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(0.2,0.4));
		if(pos.z >= ceilingz - 2)
			vls.z *= -1;
		Plsmk.vel = vls;
		//Plsmk.accel = -(vls * 0.02);
		Plsmk.Flags = SPF_ROLL;
		Plsmk.StartRoll = random(0,360);
		Plsmk.RollVel = random(-4,4);
		Plsmk.StartAlpha = 1.0;
		Plsmk.FadeStep = 0.080;
		Plsmk.Size = random(50,74);
		Plsmk.SizeStep = random(2,4);
		Plsmk.Lifetime = 12; 
		Plsmk.Pos = pos;
		Level.SpawnParticle(Plsmk);
	}
}

class PB_DeadSpider : CurbstompedMarine
{
    Default
    {
        Radius 20;
        Height 10;
        Scale 1.3;
        Mass 1000;
        Health 200;
        DamageFactor "Crusher", 50.0;
        DamageFactor "Blood", 0.0;
        DamageFactor "Trample", 0.0;
        +SHOOTABLE;
        +NOTELEPORT;
        +MOVEWITHSECTOR;
        +CORPSE;
        -SOLID;
        +THRUACTORS;
    }

    States
    {
    Spawn:
        BSPI P -1;
        Stop;

    Raise:
        TNT1 A 2 { A_SpawnProjectile("RealFlameTrailsSmall", 6, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 { A_SpawnItem("PentagramSpawner", 0, 60); }
        TNT1 A 2 { A_SpawnProjectile("RealFlameTrailsSmall", 6, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 { A_SpawnItem("PentagramSpawner", 0, 60); }
        TNT1 A 0 { A_SpawnItem("TeleportFog"); }
        TNT1 A 0 { A_NoBlocking(); }
        TNT1 A 0 { A_SpawnItem("PB_Arachnotron"); }
        Stop;

    Death.Cut:
    Death.Cutless:
    Death:
        TNT1 A 0 { A_SpawnItemEx("GibsZ", -3, -3); }
        TNT1 A 0 { A_SpawnItemEx("GibsZ", 3, 3); }
        TNT1 AAA 0 { A_SpawnProjectile("PB_SpiderPart1", 32, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAAA 0 { A_SpawnProjectile("PB_SpiderPart2", 32, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AA 0 { A_SpawnProjectile("XDeathSpiderNew1", 32, 0, random(0, 360), 2, random(60, 90)); }
        TNT1 AAA 0 { A_SpawnProjectile("SpiderLeg", 32, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAA 0 { A_SpawnProjectile("XDeath1", 5, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAA 0 { A_SpawnProjectile("XDeath2", 5, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAA 0 { A_SpawnProjectile("XDeath3", 5, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAA 0 { A_SpawnProjectile("XDeath4", 5, 0, random(0, 360), 2, random(0, 160)); }
        Stop;
    }
}

class PB_DeadSpider2 : PB_DeadSpider
{
    States
    {
    Spawn:
        BSPI Y -1;
        Stop;
    }
}

class PB_XDeadSpider : PB_DeadSpider
{
    Default
    {
        Scale 1.0;
        Health 200;
    }

    States
    {
    Spawn:
        XBSP D -1;
        Stop;

    Death.Cut:
    Death.Cutless:
    Death:
        TNT1 AAA 0 { A_SpawnProjectile("XDeath1", 5, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAA 0 { A_SpawnProjectile("XDeath2", 5, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAA 0 { A_SpawnProjectile("XDeath3", 5, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAA 0 { A_SpawnProjectile("XDeath4", 5, 0, random(0, 360), 2, random(0, 160)); }
        Stop;
    }
}

class PB_DestroyedArachnotron : PB_DeadSpider
{
    Default
    {
        Scale 1.0;
    }

    States
    {
    Spawn:
        ARF1 O -1;
        Stop;
    }
}

class PB_NoLegsSpider : PB_DeadSpider
{
    Default
    {
        Scale 1.0;
        Health 300;
        +NOBLOOD;
    }

    States
    {
    Spawn:
        ARF2 H -1;
        Stop;
    }
}

class PB_SpiderPart1 : Actor
{
    Default
    {
        Radius 1;
        Height 8;
        Speed 12;
        Scale 1.3;
        Mass 1;
        DamageType "Blood";
        SeeSound "misc/xdeath4";
        DeathSound "misc/xdeath1";
        Decal "BloodSuper";
        +NOBLOCKMAP;
        +MISSILE;
        +NOTELEPORT;
        +MOVEWITHSECTOR;
        +RIPPER;
        +BLOODLESSIMPACT;
    }

    States
    {
    Spawn:
        TNT1 A 0 { A_JumpIf(waterlevel > 1, "Splash"); }
        ID22 ABCD 2 { A_SpawnProjectile("BloodTrails", 0, 0, 180, 2); }
        Loop;

    Death:
        ID22 E 1 { A_SpawnItem("Brutal_BloodSpot", 0, 0, 0, 1); }
        ID22 E -1;
        Stop;

    Splash:
        TNT1 A 0;
        Stop;
    }
}

class PB_SpiderPart2 : Actor
{
    Default
    {
        Radius 1;
        Height 8;
        Speed 12;
        Scale 2.0;
        Mass 1;
        DamageType "Blood";
        BounceFactor 0.5;
        SeeSound "misc/xdeath4";
        DeathSound "misc/xdeath1";
        Decal "BloodSuper";
        +NOBLOCKMAP;
        +MISSILE;
        +NOTELEPORT;
        +MOVEWITHSECTOR;
        +RIPPER;
        +BLOODLESSIMPACT;
        +DOOMBOUNCE;
    }

    States
    {
    Spawn:
        TNT1 A 0 { A_JumpIf(waterlevel > 1, "Splash");  }
        ID22 ABCD 2 { A_SpawnProjectile("BloodTrails", 0, 0, 180, 2); }
        Loop;

    Death:
        ID22 F 1 { A_SpawnItem("Brutal_BloodSpot", 0, 0, 0, 1); }
        ID22 F -1;
        Stop;

    Splash:
        TNT1 A 0;
        Stop;
    }
}

class PB_CrawlingDyingSpider : Actor
{
    Default
    {
        Radius 12;
        Height 24;
        Speed 9;
        Health 100;
        PainSound "SP_CRAWL";
        DamageFactor "Kick", 0.1;
        DamageFactor "Melee", 0.1;
        DamageFactor "SuperPunch", 0.1;
        DamageFactor "SuperKick", 0.1;
        DamageFactor "Extremepunches", 0.1;
        PainChance "Kick", 255;
        PainChance "SuperKick", 255;
        PainChance "SuperPunch", 255;
        PainChance "Extremepunches", 255;
        PainChance 255;
        DamageFactor "Trample", 2.0;
        +SHOOTABLE;
        +FLOORCLIP;
        +LOOKALLAROUND;
        +FRIGHTENED;
        +SOLID;
    }

    States
    {
    Spawn:
        TNT1 A 0 {bNOPAIN = true ;}
        TNT1 A 0 A_NoBlocking;
        NAHC EFGH 5;
        NAHC H -1;
        Stop;

    Death:
        TNT1 A 0 A_NoBlocking;
        TNT1 AAAAAAAAAAAA 0 { A_SpawnProjectile("SmallBrainPiece", 10, 0, random(0, 360), 2, random(0, 160)); }
        TNT1 AAAA 0 { A_SpawnProjectile("XDeath1", 10, 0, random(0, 360), 2, random(0, 160)); }
        NAHC IJKLMN 5;
        NAHC N -5;
        Stop;
    }
}

class PB_ArachnoTurretFrame : Actor
{
    Default
    {
        Radius 32;
        Height 24;
        Health 20;
        DamageFactor "Fatality", 2.0;
        +SHOOTABLE;
        +SOLID;
        +FLOORCLIP;
        +NOTELEPORT;
        +MOVEWITHSECTOR;
        +CORPSE;
    }

    States
    {
    Spawn:
        ARF2 Y 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 A_SpawnItem("Spark_UpOnce", 0, 15);
        TNT1 A 0 A_SpawnItem("ShoqueAzul", 0, 17);
        ARF2 Z 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        ARF2 YY 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 A_SpawnItem("Spark_UpOnce", 0, 15);
        TNT1 A 0 A_SpawnItem("ShoqueAzul", 0, 17);
        ARF2 Z 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        ARF2 YY 2 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 A_SpawnItem("Spark_UpOnce", 0, 15);
        TNT1 A 0 A_SpawnItem("ShoqueAzul", 0, 17);
        ARF2 Z 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        ARF2 YY 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 A_SpawnItem("Spark_UpOnce", 0, 15);
        TNT1 A 0 A_SpawnItem("ShoqueAzul", 0, 17);
        ARF2 Z 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        ARF2 YY 4 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 A_SpawnItem("Spark_UpOnce", 0, 15);
        TNT1 A 0 A_SpawnItem("ShoqueAzul", 0, 17);
        ARF2 Y 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        ARF2 ZZ 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 A_SpawnItem("Spark_UpOnce", 0, 15);
        TNT1 A 0 A_SpawnItem("ShoqueAzul", 0, 17);
        ARF2 Z 6 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        ARF2 YY 2 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        TNT1 A 0 A_SpawnItem("Spark_UpOnce", 0, 15);
        TNT1 A 0 A_SpawnItem("ShoqueAzul", 0, 17);
        ARF2 Z 1 { A_SpawnProjectile("PlasmaSmoke", 30, 0, random(0, 360), 2, random(70, 110)); }
        Goto Death;

    Death.Fatality:
    Death:
        TNT1 A 0 A_SpawnItemEx("PB_NoLegsSpider", 0, 1, 1, 1, 1);
        Stop;
    }
}
