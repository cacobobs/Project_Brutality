// Spawning Related Tokens

Class SpawnwSSG : Inventory {default{inventory.maxamount 1;}}
Class NoSpawnQuadSG : Inventory {default{inventory.maxamount 1;}}
Class NoSpawn : Inventory {default{inventory.maxamount 1;}}
Class CheckCvarSSG : Inventory {default{inventory.maxamount 1;}}
Class CvarChecked : Inventory {default{inventory.maxamount 1;}}
Class NoSpawnASGUpgrade : Inventory {default{inventory.maxamount 1;}}
Class NeedSpawning : Inventory {default{inventory.maxamount 1;}}
Class PlayerHasCaughtup : Inventory {default{inventory.maxamount 1;}}

//Chainsaw Spawner
Class PlayerHasChainsawPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasFLMTPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasFLMTUPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
// Shotgun Spawner
Class PlayerHasShotgunPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasRevolverPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasASGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasSGMagPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasDeaglePermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
// SSG Spawner
Class PlayerHasSSGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasQuadSGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasASGDrumPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//Chaingun Spawner
Class PlayerHasMGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasCarbinePermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasNailGunPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasHDMRPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasSMGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasMGUPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasLMGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//RL Spawner
Class PlayerHasRLPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasSGLPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//Plasma Spawner
Class PlayerHasM1PlasmaPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasM2PlasmaPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasRGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasCryoPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasM2UPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//BFG Spawner
Class PlayerHasBFGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasMG42Permanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasUnmakerPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}

Class PB_SpawnerBase : Actor
{
	
	PB_GlobalStats Stats;
	
	Default
	{
		+LOOKALLAROUND;
		// Necessary for see states on the monster spawners
		// so stuff doesn't break.
		// does not apply with dynamic spawning turned off.
		Monster; 
		-SOLID;
		+NOTIMEFREEZE;
		-COUNTKILL;
		//+NODAMAGE;
		+DONTGIB;
		//+NOMENU;
		+FORCEXYBILLBOARD;
		Species "spawner";
	}

	bool isTieredSet()
	{
		return CVAR.GetCVAR("pb_spawner_tiered").GetBool();
	}
	
	int Tier()
	{
		return CVAR.GetCVAR("PBSpawnChoices").GetInt();
	}
	
	enum Spawn_Tiers {
		Tier_Chaotic	=		663,
		Tier_Dynamic 	=		666,
		Tier_1 			=		667,
		Tier_2 			= 		668,
		Tier_3 			=		669,
		Tier_4 			= 		670,
		Tier_Tiered 	= 		671,
		Tier_Death 		= 		672
	}
	
	//
	//	this function handles the spawning logic :B
	//	
	//
	state DoSpawnLogic()
	{
		Stats = PB_GlobalStats.Get();
		
		int Count = Stats.Counters[PB_GlobalStats.Counter_LevelsCompleted];
		
		int spawnbal = Tier_Dynamic;
		int lvtp = (levelsToPlay / 4);
		
		if(SpawnBalance == Tier_Chaotic)
			spawnbal = Tier_Chaotic;
		else
			spawnbal = clamp(SpawnBalance,Tier_Dynamic,Tier_Death);
		
		statelabel st = "CHAOTICRANDOM";
		switch(spawnbal)
		{
			case Tier_Chaotic:	st = "CHAOTICRANDOM";	break;
			case Tier_1:		st = "Tier1";			break;
			case Tier_2:		st = "Tier2";			break;
			case Tier_3:		st = "Tier3";			break;
			case Tier_Death:
			case Tier_4:		st = "Tier4";			break;
			
			case Tier_Tiered:
				if(Count <= lvtp)						{st = "Tier1";}
				else if(Count <= (lvtp * 2))			{st = "Tier2";}
				else if(Count <= (lvtp * 3))			{st = "Tier3";}
				else if(Count > (lvtp * 3))				{st = "Tier4";}
				break;
				
			case Tier_Dynamic:
				if(Count < (lvtp))						{st = "Tier1";}
				else if(Count == (lvtp))				{st = "T2Random64";}
				else if(Count == ((lvtp) + 1))			{st = "T2Random128";}
				else if(Count == ((lvtp) + 2))			{st = "T2Random192";}
					
				else if(Count < ((lvtp) * 2))			{st = "Tier2";}
				else if(Count == ((lvtp) * 2))			{st = "T3Random64";}
				else if(Count == (((lvtp) * 2) + 1))	{st = "T3Random128";}
				else if(Count == (((lvtp) * 2) + 2))	{st = "T3Random192";}
					
				else if(Count < ((lvtp) * 3))			{st = "Tier3";}
				else if(Count == ((lvtp) * 3))			{st = "T4Random64";}
				else if(Count == (((lvtp) * 3) + 1))	{st = "T4Random128";}
				else if(Count == (((lvtp) * 3) + 2))	{st = "T4Random192";}
				
				else if(Count > (((lvtp) * 3) + 2))		{st = "Tier4";}
				break;
		}
		
		//console.printf("Running Spawn logic! Count is: "..Count..", spawn balance is: "..spawnbal..", State label jump: "..st);
		return self.resolvestate(st);
	}
	
	actor PB_SpawnerSpawn(name spawner)
	{
		Class<Actor> cls = spawner;
		if(!cls)
		{
			console.printf("unkown spawner class: "..spawner..". \n");
			return null;
		}
		else
		{
			actor newmobj = Spawn(cls, Pos, NO_REPLACE);
			if (newmobj != null)
			{
				// copy everything relevant
				newmobj.SpawnAngle	= SpawnAngle;
				newmobj.Angle		= Angle;
				newmobj.Pitch		= Pitch;
				newmobj.Roll		= Roll;
				newmobj.SpawnPoint	= SpawnPoint;
				newmobj.special		= special;
				newmobj.args[0]		= args[0];
				newmobj.args[1]		= args[1];
				newmobj.args[2]		= args[2];
				newmobj.args[3]		= args[3];
				newmobj.args[4]		= args[4];
				newmobj.special1	= special1;
				newmobj.special2	= special2;
				newmobj.SpawnFlags = SpawnFlags & ~(MTF_SECRET|MTF_DORMANT);	// MTF_SECRET needs special treatment to avoid incrementing the secret counter twice. It had already been processed for the spawner itself.
				SpawnFlags &= ~MTF_DORMANT; //we dont want the spawner to be deactivated
				newmobj.HandleSpawnFlags();
				if(isdormant)
					SpawnFlags |= MTF_DORMANT;
				newmobj.SpawnFlags = SpawnFlags;
				newmobj.bCountSecret = SpawnFlags & MTF_SECRET;	// "Transfer" count secret flag to spawned actor
				newmobj.ChangeTid(tid);
				newmobj.Vel	= Vel;
				newmobj.master = master;	// For things such as DamageMaster/DamageChildren, transfer mastery.
				newmobj.target = target;
				newmobj.tracer = tracer;
				newmobj.CopyFriendliness(self, false);
				newmobj.bAMBUSH = bAMBUSH;
				newmobj.bSTEALTH = bSTEALTH; //handles stealth flags for replacing stealth monsters
				// This handles things such as projectiles with the MF4_SPECTRAL flag that have
				// a health set to -2 after spawning, for internal reasons.
				if (health != SpawnHealth()) newmobj.health = health;
				if (!bDropped) newmobj.bDropped = false;
				// Handle special altitude flags
				if (newmobj.bSpawnCeiling)
				{
					newmobj.SetZ(newmobj.ceilingz - newmobj.Height - SpawnPoint.Z);
				}
				else if (newmobj.bSpawnFloat) 
				{
					double space = newmobj.ceilingz - newmobj.Height - newmobj.floorz;
					if (space > 48)
					{
						space -= 40;
						newmobj.SetZ((space * random[randomspawn]()) / 256. + newmobj.floorz + 40);
					}
					newmobj.AddZ(SpawnPoint.Z);
				}
				// Bouncecount is used to count how many recursions we're in.
				if (newmobj is 'RandomSpawner')
					newmobj.bouncecount = ++bouncecount;
				// If the spawned actor has either of those flags, it's a boss.
				return newmobj;
			}
			else
			{
				console.printf(self.getclassname().." could not spawn: "..spawner..". \n");
				return null;
			}
		}
		return null;
	}
	
	bool isdormant;
	override void beginplay()
	{
		super.beginplay();
		bSTEALTH = GetDefaultByType(GetReplacee(self.GetClass())).bSTEALTH;
		bool isdormant = (SpawnFlags & MTF_DORMANT);	//save this
		
	}
	
	override void Tick()
	{
		
		Super.Tick();
		
		
		//Check CVARs if tiered preset and, if so, select appropriate tier (I, II, III, IV) ... else go with default spawn
		//Check CVARs for spawn value pulled from presets
		
		//If monster, check surrounding actors for same class name
		
	}

	States
	{
		Spawn:
			TNT1 A 0;
		StartChoose:
			TNT1 A 0;
			TNT1 A 0 DoSpawnLogic();
			TNT1 A 1;
			stop;
		T2Random64:
			TNT1 A 0 A_Jump(64,"Tier2");
			TNT1 A 0 A_Jump(256,"Tier1");
		T2Random128:
			TNT1 A 0 A_Jump(128,"Tier2");
			TNT1 A 0 A_Jump(256,"Tier1");
		T2Random192:
			TNT1 A 0 A_Jump(192,"Tier2");
			TNT1 A 0 A_Jump(256,"Tier1");
		T3Random64:
			TNT1 A 0 A_Jump(64,"Tier3");
			TNT1 A 0 A_Jump(256,"Tier2");
		T3Random128:
			TNT1 A 0 A_Jump(128,"Tier3");
			TNT1 A 0 A_Jump(256,"Tier2");
		T3Random192:
			TNT1 A 0 A_Jump(192,"Tier3");
			TNT1 A 0 A_Jump(256,"Tier2");
		T4Random64:
			TNT1 A 0 A_Jump(64,"Tier4");
			TNT1 A 0 A_Jump(256,"Tier3");
		T4Random128:
			TNT1 A 0 A_Jump(128,"Tier4");
			TNT1 A 0 A_Jump(256,"Tier3");
		T4Random192:
			TNT1 A 0 A_Jump(192,"Tier4");
			TNT1 A 0 A_Jump(256,"Tier3");
		CHAOTICRANDOM:
			TNT1 A 0 A_Jump(256, "Tier4","Tier3", "Tier2", "Tier1");
			Stop;
		Tier4:
		Tier3:
		Tier2:
		Tier1:
			TNT1 A 1;
			stop;
		Death:
			TNT1 A 1;
			goto spawn;
	}
}

CLASS droppedbase:CustomInventory
{
default
{
	Radius 8;
	Height 10;
	Scale 0.5;
	gravity 1;
	Decal "none";
	//+MOVEWITHSECTOR;
	+DONTGIB;
	//+NOTELEPORT;
	+FLOORCLIP;
	Inventory.PickupMessage "";
	Inventory.PickupSound "";
	+NOTIMEFREEZE;
}
	States
	{
	Spawn:
		//TNT1 AA 1
		TNT1 AA 0;
	Spawn2:	
		TNT1 A 0;
		Stop;
	Pickup:
		TNT1 A 0;
		Stop;
	Pickup2:
		TNT1 A 0;
		Stop;
	Death:
		TNT1 A 0;
		Stop;
	}
}

class PBSpawnInfo play
{
	class<PBRandomSpawner> Target; // [Ace] The spawner to inject into.
	class<Actor> Injected;
	class<PB_Ammo> DirectAmmo; // [Ace] Spawned may be the same as DirectAmmo in case of singular unboxed items like 35mm rounds.
	Array<class<Actor> > Users;
	bool DoNotSpawn;
	int Chance;
	int Weight;

	void ParseUsers(string raw)
	{
		if (raw == "")
		{
			return;
		}
		
		Array<string> split;
		raw.Split(split, "|");

		for (int i = 0; i < split.Size(); ++i)
		{
			class<Actor> cls = split[i];
			if (!cls)
			{
				continue;
			}
			Users.Push(cls);
		}
	}
	
	static PBSpawnInfo Create(class<PBRandomSpawner> target, Name injected, int chance, int weight, class<PB_Ammo> directAmmo = null, int flags = 0)
	{
		class<Actor> cls = injected;
		if (!cls)
		{
			return null;
		}

		PBSpawnInfo dsi = new('PBSpawnInfo');
		dsi.Target = target;
		dsi.Injected = cls;
		dsi.Chance = chance;
		dsi.Weight = weight;
		dsi.directAmmo = directAmmo;
		//dsi.Flags = flags;

		/*let amSpawnCls = (class<PB_AmmoSpawner>)(injected);
		if (amSpawnCls)
		{
			dsi.DirectAmmo = GetDefaultByType(amSpawnCls).SpawnClass;
		}*/
		return dsi;
	}
}

extend class PB_EventHandler
{
	Array<PBSpawnInfo> Spawners;
	protected bool InitializedInjectors;
	
	void InjectSpawn(class<PBRandomSpawner> target, Name injected, int chance, int weight, class<PB_Ammo> directAmmo = null, string users = "")
	{
		class<Actor> cls = injected;
		if (!cls)
		{
			return;
		}
		PBSpawnInfo dsi = new('PBSpawnInfo');
		dsi.Target = target;
		dsi.Injected = cls;
		dsi.Chance = chance;
		dsi.Weight = weight;
		dsi.DirectAmmo = directAmmo;
		//dsi.ParseUsers(users);	//

		Spawners.Push(dsi);
	}
	
	
	void InitInjectors()
	{
		if (InitializedInjectors)
		{
			return;
		}

		InitializedInjectors = true;
		foreach (cls : AllClasses)
		{
			if (cls is 'PBInjector' && !cls.IsAbstract())
			{
				let inj = PBInjector(new(cls));
				inj.Init(self);
				inj.Destroy();
			}
		}
		
		//just a testing thing
		/*int xd = Spawners.size();
		if(xd < 1)
			console.printf("no injectors found!");
		else
		{
			foreach(ij : Spawners)
			{
				console.printf("injected: "..ij.Injected.getclassname().." into: "..ij.Target.getclassname());
			}
		}*/
	}
	
	
/*
	protected void DoInjectorStuff(Actor spawned)
	{
		let bpack = DSBackpack(spawned);
		if (bpack)
		{
			for (int i = 0; i < Spawners.Size(); ++i)
			{
				if (Spawners[i].DirectAmmo && Spawners[i].DoNotSpawn)
				{
					bpack.Blacklist.Push(Spawners[i].DirectAmmo);
				}
			}
		}
	}*/
}

// [Ace] Never, EVER replace the spawners! That will break mods that use the correct method and only the last loaded replacement will win over.
// Always inject into them.
// Additionally, if you are injecting into these spawners, ALWAYS wrap whatever you are trying to spawn in a PBRandomSpawner (pick the appropriate one).
// Even if you are only spawning a single item and not actually randomizing anything, wrap that around in a random spawner and inject that instead.

class PBRandomSpawner : RandomSpawner abstract
{
	override void PostSpawn(Actor spawned)
	{
		spawned.bDropped = bDropped;
		spawned.bSTEALTH = bSTEALTH;
		return;
		
		let wpn = PB_Weapon(spawned);
		let pkp = PB_Ammo(spawned);
		let mon = PB_Monster(spawned);
		let med = PB_Health(spawned);
		let ar1 = PB_Armor(spawned); 	//armor
		let ar2 = PB_Armor2(spawned); 	//bonus
		let spn = PBRandomSpawner(spawned);

		if (wpn)
		{
			//wpn.OnSpawn();
		}
		else if (pkp)
		{
			//pkp.OnSpawn();
		}
		else if (mon)
		{
			//mon.OnSpawn();
		}
		else if (med)
		{
			//med.OnSpawn();
		}
		else if (ar1)
		{
			//med.OnSpawn();
		}
		else if (ar2)
		{
			//med.OnSpawn();
		}
		else if (spn)
		{
			//spn.OnSpawn();
		}
	}

	override void PostBeginPlay()
	{
		if (!AllowPostBeginPlay) //|| bDROPPED && !bALLOWENEMYDROPS)
		{
			return;
		}
		//console.printf("Running: PostBeginPlay() from: "..getclassname());
		InitInternalList();
		ProcessInjections();
		
		let s = ChooseSpawn();
		HandleSpawnExeptions(s);
		//console.printf(""..getclassname().." choose: "..s);
		if (s == 'None')
		{
			TryCallSpecial();
			ClearCounters();
		}
		else
		{
			Species = Name(GetReplacement(s));
		}
		
		//actual spawning happens here
		Super.PostBeginPlay();
	}
	
	override Name ChooseSpawn()
	{
		if (Spawns.Size() == 0)
		{
			return 'None';
		}

		Array<int> weights;
		foreach (i : Spawns)
		{
			//console.printf(""..getclassname().."'s spawns: "..i.injected.getclassname());
			weights.Push(i.Weight);
		}

		int index = PBCore.GetWeightedResult(weights);
		if (random[randomspawn](1, 255) <= Spawns[index].Chance * ChanceFactor)
		{
			return Spawns[index].Injected.GetClassName();
		}

		return 'None';
	}
	

	override void BeginPlay()
	{
		Handler = PB_EventHandler(EventHandler.Find('PB_EventHandler'));
		if (Handler)
			Handler.InitInjectors();
			
		ChanceFactor = 1.0;
		
		Actor.BeginPlay();
		return;
	}
	
	override void Tick()
	{
		// [Ace] So the reason this exists is kinda bullshit: WorldThingSpawned will not fire if the spawner gets destroyed immediately, which is 100% of the time.
		// This hack exists so that WorldThingSpawned is fired, and only then PostBeginPlay is called.
		// The use case for this is Zhs2's injectors which need to intercept dropped ammo spawners and set ALLOWENEMYDROPS on them in order to allow them to spawn ammo.
		if (GetAge() == 0)
		{
			AllowPostBeginPlay = true;
			PostBeginPlay();
		}
		Super.Tick();
	}
	
	//
	protected void InitInternalList()
	{
		DropItem di = GetDropItems();
		//console.printf("Running: InitInternalList() from: "..getclassname());
		while (di)
		{
			if (di.Name == 'None' || !CanSpawn(di.Name))
			{
				di = di.Next;
				continue;
			}
			
			let info = PBSpawnInfo.Create(GetClass(), di.name, di.Probability, max(1, di.Amount),null,0);
			if (info)
			{
				Spawns.Push(info);
			}
			di = di.Next;
		}
	}
	
	protected void ProcessInjections()
	{
		//console.printf("Running: ProcessInjections() from: "..getclassname());
		Array<PBSpawnInfo> injected;
		if (Handler)
		{
			foreach (sp : Handler.Spawners)
			{
				//if (sp.DoNotSpawn || bDROPPED && !(sp.Flags & PBSpawnInfo.SIF_DROPPED) || !bDROPPED && sp.Flags & DSSpawnInfo.SIF_DROPPED || !CanSpawn(sp.Injected))
				if(sp.DoNotSpawn || !CanSpawn(sp.Injected.getclassname()))
				{
					continue;
				}

				//bool ex = sp.Flags & PBSpawnInfo.SIF_EXPLICIT;
				//if (ex && sp.Target == GetClass() || !ex && sp.Target is GetClass())
				if(sp.target is getclass())
				{
					injected.Push(sp);
				}
			}
		}
		Spawns.Append(injected);
	}

	protected void TryCallSpecial()
	{
		if (special > 0)
		{
			A_CallSpecial(special, Args[0], Args[1], Args[2], Args[3], Args[4]);
		}
	}

	virtual bool CanSpawn(Name di)
	{
		class<Actor> actCls = di;
		if (actCls && (sv_nomonsters || Level.nomonsters) && GetDefaultByType(actCls).bISMONSTER)
		{
			return false;
		}
		return true;
		/*
		class<PB_Weapon> wpnCls = di.Name;
		class<PB_Ammo> pkpCls = di.Name;
		class<PB_Monster> monCls = di.Name;
		class<PB_Health> medCls = di.Name;
		class<PB_Armor> ar1Cls = di.Name;
		class<PB_Armor2> ar2Cls = di.Name;
		class<PBRandomSpawner> spnCls = di.Name;

		if (wpnCls)
		{
			let defWpn = GetDefaultByType(wpnCls);
			return (!PBCore.CheckIfExists(wpnCls));
		}
		else if (pkpCls)
		{
			let defPkp = GetDefaultByType(pkpCls);
			return (!PBCore.CheckIfExists(pkpCls));
		}
		else if (monCls)
		{
			let defMon = GetDefaultByType(monCls);
			return (!PBCore.CheckIfExists(monCls));
		}
		else if (medCls)
		{
			let defMed = GetDefaultByType(medCls);
			return (!PBCore.CheckIfExists(medCls));
		}
		else if (ar1Cls)
		{
			let defAr1 = GetDefaultByType(ar1Cls);
			return (!PBCore.CheckIfExists(ar1Cls));
		}
		else if (ar2Cls)
		{
			let defAr2 = GetDefaultByType(ar2Cls);
			return (!PBCore.CheckIfExists(ar2Cls));
		}
		else if (spnCls)
		{
			let defSpn = GetDefaultByType(spnCls);
			return (!PBCore.CheckIfExists(spnCls));
		}*/
		return true;
	}
	
	
	//the idea here is:
	//	this function is run after spawn choosing
	//	it gets the choosed spawn thing, and here you can handle things like
	//	change it to other thing if its option is disabled
	virtual void HandleSpawnExeptions(in out name toSpawn)
	{
		
	}
	
	protected Array<PBSpawnInfo> Spawns;
	protected PB_EventHandler Handler;
	double ChanceFactor;
	
	private int BehaviourFlags;
	protected bool AllowPostBeginPlay;
	flagdef AllowDropsOnFirstMap: BehaviourFlags, 0;
	flagdef AllowEnemyDrops: BehaviourFlags, 1;

	// [Ace] If a nested DSRandomSpawner spawns only (non)magical items, mark the inner spawner with one of these so that it does not get picked and result in an empty spawn,
	// essentially robbing other valid items of a chance to spawn instead.
	flagdef Supernatural: BehaviourFlags, 2;
	flagdef OnlyFleshAndSteel: BehaviourFlags, 3;
	flagdef Unique: BehaviourFlags, 4;

	Default
	{
		+FRIENDLY
	}
}


Class PBInjector abstract play
{
	abstract void Init(PB_EventHandler handler);
}